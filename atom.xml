<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://bowiezhang.github.io/</id>
    <title>养猪大户</title>
    <updated>2020-07-09T10:41:55.800Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://bowiezhang.github.io/"/>
    <link rel="self" href="https://bowiezhang.github.io/atom.xml"/>
    <subtitle>做人最紧要系开心</subtitle>
    <logo>https://bowiezhang.github.io/images/avatar.png</logo>
    <icon>https://bowiezhang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, 养猪大户</rights>
    <entry>
        <title type="html"><![CDATA[支持大量数据的树组件]]></title>
        <id>https://bowiezhang.github.io/post/zhi-chi-da-liang-shu-ju-de-shu-zu-jian/</id>
        <link href="https://bowiezhang.github.io/post/zhi-chi-da-liang-shu-ju-de-shu-zu-jian/">
        </link>
        <updated>2020-07-09T10:01:55.000Z</updated>
        <content type="html"><![CDATA[<h3 id="前言">前言</h3>
<p>公司之前由于出现了几千条数据的树，用组件的树直接卡死，所以需要自己写一个能支持大量数据的树组件<br>
源码：<a href="https://github.com/Bowiezhang/vue-bigDataTree">vue-bigDataTree</a></p>
<h3 id="主要思想">主要思想</h3>
<p>之前在使用组件树的时候，使用过chrome的控制台进行分析过，其实造成卡顿大部分的原因是因为需要渲染几千个节点。</p>
<ol>
<li>更改DOM的结构为平级结构，树节点的父子关系由样式去控制</li>
<li>使用虚拟列表来渲染数据，用两层样式来控制滚动显示的数据。</li>
</ol>
<p>第一点其实就是为了减少对数据遍历的深度，减少当出现大量层级的时候需要迭代处理<br>
第二点主要由两层盒子去控制，底下的盒子高度通过树的节点数量来计算高度，来展示一个实际全部渲染数据时会产生的高度，用来产生视觉上的滚动。虚拟列表的展示数据的盒子浮动在底下盒子的上方，通过监听滚动底下盒子的scroll来判断需要展示的数据，动态更换虚拟列表里的数据，同时通过scroll的值和transform来控制虚拟列表的盒子始终在视觉的正中间。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[原型和原型链]]></title>
        <id>https://bowiezhang.github.io/post/yuan-xing-he-yuan-xing-lian/</id>
        <link href="https://bowiezhang.github.io/post/yuan-xing-he-yuan-xing-lian/">
        </link>
        <updated>2020-07-08T12:55:08.000Z</updated>
        <content type="html"><![CDATA[<p>JS所有对象分为函数对象和普通对象。凡是通过new Function()创建得来的对象都是函数对象。函数对象拥有prototype属性和<code>__proto__</code>属性。<br>
new Object()只有<code>__proto__</code>属性，prototype为undefined。</p>
<h3 id="prototype">prototype</h3>
<blockquote>
<p>JS设计之初为了实现简单继承，引入了prototype属性，也叫原型对象（显式原型）。</p>
</blockquote>
<p>从本质上讲，prototype是一个普通对象，是函数对象的构造函数创建的一个实例。相当于在Function创建的时候，自动创建了一个它的实例，并且把这个实例赋值给了prototype。</p>
<h3 id="__proto__"><code>__proto__</code></h3>
<blockquote>
<p>所有的对象obj(null和undefined除外)都具有<code>__proto__</code>属性（隐式原型），<code>__proto__</code>属性在本质上为一个指针，指向函数对象的prototype属性。</p>
</blockquote>
<p>简单的来说，<code>__proto__</code>这个属性指向的是创建自己的构造函数的原型对象（prototype）</p>
<h3 id="constructor">constructor</h3>
<p>顾名思义，构造器constructor就是用来构造函数对象的，constructor 属性返回对创建此对象的函数对象的引用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[清除浮动和BFC]]></title>
        <id>https://bowiezhang.github.io/post/qing-chu-fu-dong-he-bfc/</id>
        <link href="https://bowiezhang.github.io/post/qing-chu-fu-dong-he-bfc/">
        </link>
        <updated>2020-07-04T05:54:11.000Z</updated>
        <content type="html"><![CDATA[<h3 id="清除浮动">清除浮动</h3>
<blockquote>
<p>在非IE浏览器（如Firefox）下，当容器的高度为auto，且容器的内容中有浮动（float为left或right）的元素，在这种情况下，容器的高度不能自动伸长以适应内容的高度，使得内容溢出到容器外面而影响（甚至破坏）布局的现象。这个现象叫浮动溢出，为了防止这个现象的出现而进行的CSS处理，就叫CSS清除浮动。</p>
</blockquote>
<p>其实清除浮动总的来说最常用的就是两种方法：</p>
<ul>
<li>触发父元素的BFC<br>
例如给父元素添加overflow:hidden，触发父元素的BFC，可以将自身的浮动问题消除。</li>
<li>利用clear:both属性<br>
可以在父元素内的某一个元素设置clear：both来消除浮动，最常见的是直接添加一个<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>来消除。或者在父元素的:after伪元素中添加，同样可以消除浮动。</li>
</ul>
<h3 id="bfc">BFC</h3>
<ul>
<li>什么是BFC？</li>
</ul>
<blockquote>
<p>BFC 即 Block Formatting Contexts (块级格式化上下文)。具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。</p>
</blockquote>
<ul>
<li>
<p>如何触发BFC？</p>
<ol>
<li>html根元素</li>
<li>浮动元素：float 除 none 以外的值</li>
<li>绝对定位元素：position (absolute、fixed)</li>
<li>display 为 inline-block、table-cells、flex</li>
<li>overflow 除了 visible 以外的值 (hidden、auto、scroll)</li>
</ol>
</li>
<li>
<p>BFC的特性和应用？</p>
<ol>
<li>同属于一个BFC内的两个元素margin会重叠。</li>
<li>可以清除内部元素的浮动</li>
<li>可以阻止元素被浮动元素覆盖</li>
<li>可以实现自适应两栏布局</li>
</ol>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[文件、图片的上传下载]]></title>
        <id>https://bowiezhang.github.io/post/wen-jian-tu-pian-de-shang-chuan-xia-zai/</id>
        <link href="https://bowiezhang.github.io/post/wen-jian-tu-pian-de-shang-chuan-xia-zai/">
        </link>
        <updated>2020-05-22T08:22:28.000Z</updated>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>由于公司项目基本上都会涉及到导入导出功能，但是编写的次数都并不是很多，导致每次写完后不记录下来再过几个月后需要重新写这个功能时需要翻查代码，所以花点时间将常见的一些方法记录下来</p>
<h2 id="上传">上传</h2>
<p>使用input标签上传<code>&lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;</code>，但是由于input样式实在不咋地，所以需要增加一个button，并将input标签隐藏起来。</p>
<p>主要逻辑变成了：button(通过点击事件)-&gt;触发input点击事件-&gt;调起本地选取文件-&gt;选择文件后触发input的change事件，change事件中通过e.target.files获取到文件。</p>
<p>获取到文件之后，需要通过接口上传到后台，由于axios一般都会在拦截器处进行json序列化，如果直接通过axios上传file，序列化后会被自动忽略掉，所以我们一般通过新建formdata来进行上传。</p>
<pre><code class="language-javascript">let formData = new FormData()
formData.append('photo', photo) || formData.append('file', file)
const http = new XMLHttpRequest()
http.open('post', url, true)
http.onload = () =&gt; {}
http.send(formData)
</code></pre>
<h2 id="下载">下载</h2>
<ul>
<li>
<p>form表单下载</p>
<p>下载主要用form标签触发submit来下载</p>
<pre><code class="language-javascript">form(
    action=&quot;exportUrl&quot;
    method=&quot;GET&quot;
    style=&quot;display: none;&quot;
)
</code></pre>
<p>比较需要注意的是，当method是get的时候，无法在action中携带参数，我们需要在form标签下添加<code>input(type=&quot;type&quot; name=&quot;name&quot; value=&quot;value&quot;)</code>来提供参数，提交的时候会自动携带。</p>
<p>如果method是post，就可以直接在action中携带后缀了。如果出现参数过长的问题的时候，可以通过在form下添加<code>&lt;input type=&quot;hidden&quot; name=&quot;name&quot; value=&quot;value&quot; /&gt;</code>，将params改为data进行提交(参数十分长的时候不应该使用GET来提交)。</p>
</li>
<li>
<p>blob转换文件</p>
<p>有的时候我们可以直接调用api获取到文件，但是此时文件是一串二进制，这时候需要将二进制先转换为blob，再通过创建a标签来下载blob文件。但是如果通过api来获取文件的时候，一般文件类型都会存在响应头中，而一般会在拦截器中将数据处理过，会导致拿不到响应头而无法确定文件类型，所以这种方法对于我来说并不是很常用。</p>
</li>
</ul>
]]></content>
    </entry>
</feed>